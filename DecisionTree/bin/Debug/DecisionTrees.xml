<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DecisionTrees</name>
    </assembly>
    <members>
        <member name="T:DecisionTrees.Attribute">
            <summary>
            Class which represents an attribute used in the class of decision
            </summary>
        </member>
        <member name="M:DecisionTrees.Attribute.#ctor(System.String,System.String[])">
            <summary>
            Boots a new instance of a class Atribute
            </summary>
            <param name="name">It indicates the attribute name</param>
            <param name="values">It indicates the possible values for the attribute</param>
        </member>
        <member name="M:DecisionTrees.Attribute.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:DecisionTrees.Attribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Label"></param>
        </member>
        <member name="P:DecisionTrees.Attribute.AttributeName">
            <summary>
            It indicates the attribute name
            </summary>
        </member>
        <member name="P:DecisionTrees.Attribute.values">
            <summary>
            Returns an array with the values of the attribute
            </summary>
        </member>
        <member name="M:DecisionTrees.Attribute.isValidValue(System.Double)">
            <summary>
            It indicates whether a value is allowed to attribute this
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DecisionTrees.Attribute.indexValue(System.Double)">
            <summary>
            Returns the index of the value
            </summary>
            <param name="value">Value to be returned</param>
            <returns>The value of the index in which the position of the value is</returns>
        </member>
        <member name="M:DecisionTrees.Attribute.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DecisionTrees.DecisionTree">
            <summary>
            Class that implements a decision tree of the algorithm using ID3
            </summary>
        </member>
        <member name="M:DecisionTrees.DecisionTree.countTotalPositives(System.Data.DataTable)">
            <summary>
            Returns the total number of positive samples in a table of samples
            </summary>
            <param name="samples">DataTable with the samples</param>
            <returns>The total number of positive samples</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.calcEntropy(System.Int32,System.Int32)">
            <summary>
            Calculate the entropy given the following formula
            -p+log2p+ - p-log2p-
            
            where: p + e is the proportion of positive values
            	   p - e is the proportion of negative values
            </summary>
            <param name="positives">Number of positive values</param>
            <param name="negatives">Number of negative values</param>
            <returns>Retorna o valor da Entropia</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.getValuesToAttribute(System.Data.DataTable,DecisionTrees.Attribute,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Varre table of samples and checking an attribute if the result is positive or negative
            </summary>
            <param name="samples">DataTable with the samples</param>
            <param name="attribute">Attribute to search</param>
            <param name="value">value allowed for the attribute</param>
            <param name="positives">No to contain all the attributes with the value determined by positive result</param>
            <param name="negatives">No to contain all the attributes with the value determined with negative</param>
        </member>
        <member name="M:DecisionTrees.DecisionTree.gain(System.Data.DataTable,DecisionTrees.Attribute)">
            <summary>
            Calculate the gain of an attribute
            </summary>
            <param name="attribute">Attribute to be calculated</param>
            <param name="samples">DataTable</param>
            <returns>The gain of attribute</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.getBestAttribute(System.Data.DataTable,DecisionTrees.Attribute[])">
            <summary>
            Returns the best attribute
            </summary>
            <param name="attributes">A vector with the attributes</param>
            <returns>Returns which have greater gain</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.allSamplesPositives(System.Data.DataTable,System.String)">
            <summary>
            Returns true if all are positive examples of sampling
            </summary>
            <param name="samples">DataTable with the samples</param>
            <param name="targetAttribute">Attribute (column) of the table which will be verified</param>
            <returns>True if all are positive examples of sampling</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.allSamplesNegatives(System.Data.DataTable,System.String)">
            <summary>
            Returns true if all examples of sampling are negative
            </summary>
            <param name="samples">DataTable with the samples</param>
            <param name="targetAttribute">Attribute (column) of the table which will be verified</param>
            <returns>True if all examples of sampling are negative</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.getDistinctValues(System.Data.DataTable,System.String)">
            <summary>
            Returns a list of all values of a separate table sampling
            </summary>
            <param name="samples">DataTable with the samples</param>
            <param name="targetAttribute">Attribute (column) of the table which will be verified</param>
            <returns>An ArrayList with different values</returns>
        </member>
        <member name="M:DecisionTrees.DecisionTree.getMostCommonValue(System.Data.DataTable,System.String)">
            <summary>
            Returns the most common value within a sampling
            </summary>
            <param name="samples">DataTable with the samples</param>
            <param name="targetAttribute">Attribute (column) of the table which will be verified</param>
            <returns>Returns the object with a higher incidence in the table of samples</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DecisionTrees.DecisionTree.internalMountTree(System.Data.DataTable,System.String,DecisionTrees.Attribute[])" -->
        <!-- Badly formed XML comment ignored for member "M:DecisionTrees.DecisionTree.mountTree(System.Data.DataTable,System.String,DecisionTrees.Attribute[])" -->
        <member name="T:DecisionTrees.TreeNode">
            <summary>
            Class will represent the tree of decision mounted
            </summary>
        </member>
        <member name="M:DecisionTrees.TreeNode.#ctor(DecisionTrees.Attribute)">
            <summary>
            Boots a new instance of TreeNode
            </summary>
            <param name="attribute">Attribute to which the node is connected</param>
        </member>
        <member name="M:DecisionTrees.TreeNode.AddTreeNode(DecisionTrees.TreeNode,System.Double)">
            <summary>
            Adds a TreeNode child in this branch of treenode in the name indicated by ValueName
            </summary>
            <param name="treeNode">TreeNode child to be added</param>
            <param name="ValueName">Name of where the branch is created treeNode</param>
        </member>
        <member name="P:DecisionTrees.TreeNode.totalChilds">
            <summary>
            Returns nro the total of children of the node
            </summary>
        </member>
        <member name="M:DecisionTrees.TreeNode.getChild(System.Int32)">
            <summary>
            Returns the child node of a node
            </summary>
            <param name="index">Contents of the child node</param>
            <returns>An object of class TreeNode representing the node</returns>
        </member>
        <member name="P:DecisionTrees.TreeNode.attribute">
            <summary>
            Attribute that are connected to Node
            </summary>
        </member>
        <member name="M:DecisionTrees.TreeNode.getChildByBranchName(System.Double)">
            <summary>
            Returns the son of a node by the name of the branch leading to it
            </summary>
            <param name="branchName">Name of branch</param>
            <returns>Tree node</returns>
        </member>
    </members>
</doc>
